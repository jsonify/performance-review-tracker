"""
Report Generator Module

This module handles the generation of final performance review reports,
including conversion between markdown and DOCX formats.
"""

import os
from datetime import datetime
import json
from docx import Document
import markdown
from markdown.extensions import fenced_code, tables

def load_roo_code_output(file_path):
    """
    Load and validate output generated by Roo Code analysis.
    
    Args:
        file_path (str): Path to the Roo Code output file
        
    Returns:
        str: The contents of the Roo Code analysis
        
    Raises:
        FileNotFoundError: If the specified file does not exist
        ValueError: If the file is empty or invalid
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Roo Code output file not found: {file_path}")
        
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read().strip()
        
    if not content:
        raise ValueError("Roo Code output file is empty")
        
    return content

def markdown_to_docx(markdown_text, output_path):
    """
    Convert markdown formatted text to a DOCX document.
    
    Args:
        markdown_text (str): The markdown formatted text to convert
        output_path (str): Path where the DOCX file should be saved
        
    Returns:
        str: Path to the generated DOCX file
        
    Raises:
        ValueError: If the markdown text is empty
    """
    if not markdown_text.strip():
        raise ValueError("Markdown text cannot be empty")
    
    # Create new Document
    doc = Document()
    
    # Process markdown line by line
    in_list = False
    lines = markdown_text.split('\n')
    
    for line in lines:
        line = line.rstrip()
        if not line:
            # Empty line
            continue
            
        # Check for headers
        if line.startswith('# '):
            doc.add_heading(line[2:], level=1)
        elif line.startswith('## '):
            doc.add_heading(line[3:], level=2)
        elif line.startswith('### '):
            doc.add_heading(line[4:], level=3)
        # Check for list items
        elif line.startswith('- '):
            if not in_list:
                in_list = True
            doc.add_paragraph(line[2:], style='List Bullet')
        # Regular paragraph
        else:
            in_list = False
            doc.add_paragraph(line)
    
    # Save the document
    doc.save(output_path)
    return output_path

def generate_final_report(roo_output, review_type, output_format='markdown', output_path=None):
    """Generate final formatted report"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # If no output path is specified, create a default one
    if not output_path:
        output_path = f"output/{review_type.lower()}_review_{timestamp}.{'md' if output_format.lower() == 'markdown' else 'docx'}"
    
    # Ensure the directory exists
    output_dir = os.path.dirname(output_path)
    if output_dir:  # If there's a directory part in the path
        os.makedirs(output_dir, exist_ok=True)
    
    if output_format.lower() == 'markdown':
        with open(output_path, 'w') as f:
            f.write(roo_output)
    elif output_format.lower() == 'docx':
        # If output path is for a docx, but we need a temporary md file
        if output_path.endswith('.docx'):
            md_path = output_path.replace('.docx', '.md')
        else:
            md_path = f"{output_path}.md"
            
        with open(md_path, 'w') as f:
            f.write(roo_output)
            
        docx_path = output_path if output_path.endswith('.docx') else f"{output_path}.docx"
        markdown_to_docx(roo_output, docx_path)
        output_path = docx_path

    return output_path

def main():
    """Command line interface for the report generator."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Generate final performance review report')
    parser.add_argument('--input', required=True, help='Path to Roo Code output file')
    parser.add_argument('--type', required=True, choices=['annual', 'competency'],
                      help='Type of review')
    parser.add_argument('--format', default='markdown', choices=['markdown', 'docx'],
                      help='Output format (default: markdown)')
    parser.add_argument(
    '--output',
    help='Output file path for the generated report')
    
    args = parser.parse_args()
    
    try:
        # Load Roo Code output
        roo_output = load_roo_code_output(args.input)
        
        # Generate report
        output_path = generate_final_report(
            load_roo_code_output(args.input), 
            args.type, 
            args.format,
            args.output  # Pass the output path
        )
        
        print(f"Report generated successfully at: {output_path}")
        
    except Exception as e:
        print(f"Error generating report: {str(e)}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())