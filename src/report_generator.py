"""
Report Generator Module

This module handles the generation of final performance review reports,
including conversion between markdown and DOCX formats.
"""

import os
from datetime import datetime
import json
from docx import Document
import markdown
from markdown.extensions import fenced_code, tables

def load_roo_code_output(file_path):
    """
    Load and validate output generated by Roo Code analysis.
    
    Args:
        file_path (str): Path to the Roo Code output file
        
    Returns:
        str: The contents of the Roo Code analysis
        
    Raises:
        FileNotFoundError: If the specified file does not exist
        ValueError: If the file is empty or invalid
    """
    if not os.path.exists(file_path):
        raise FileNotFoundError(f"Roo Code output file not found: {file_path}")
        
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read().strip()
        
    if not content:
        raise ValueError("Roo Code output file is empty")
        
    return content

def markdown_to_docx(markdown_text, output_path):
    """
    Convert markdown formatted text to a DOCX document.
    
    Args:
        markdown_text (str): The markdown formatted text to convert
        output_path (str): Path where the DOCX file should be saved
        
    Returns:
        str: Path to the generated DOCX file
        
    Raises:
        ValueError: If the markdown text is empty
    """
    if not markdown_text.strip():
        raise ValueError("Markdown text cannot be empty")

    # Convert markdown to HTML with extensions
    html = markdown.markdown(
        markdown_text,
        extensions=[
            'fenced_code',
            'tables',
            'nl2br'  # Convert newlines to line breaks
        ]
    )
    
    # Create new Document
    doc = Document()
    
    # Basic HTML to DOCX conversion
    # Note: This is a simplified conversion. For more complex formatting,
    # you would need to parse the HTML and map elements to DOCX styles
    paragraphs = html.split('<br />')
    for p in paragraphs:
        if p.strip():
            # Remove basic HTML tags
            text = p.replace('<p>', '').replace('</p>', '')
            text = text.replace('<strong>', '').replace('</strong>', '')
            text = text.replace('<em>', '').replace('</em>', '')
            doc.add_paragraph(text.strip())
    
    # Save the document
    doc.save(output_path)
    return output_path

def generate_final_report(roo_output, review_type, output_format='markdown'):
    """
    Generate the final formatted report in the specified format.
    
    Args:
        roo_output (str): The Roo Code analysis output
        review_type (str): Type of review ('annual' or 'competency')
        output_format (str): Desired output format ('markdown' or 'docx')
        
    Returns:
        str: Path to the generated report file
        
    Raises:
        ValueError: If parameters are invalid
    """
    if review_type.lower() not in ['annual', 'competency']:
        raise ValueError("Review type must be 'annual' or 'competency'")
        
    if output_format.lower() not in ['markdown', 'docx']:
        raise ValueError("Output format must be 'markdown' or 'docx'")
    
    # Create output directory if it doesn't exist
    os.makedirs('output', exist_ok=True)
    
    # Generate timestamp for unique filenames
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # Generate file paths
    md_path = f"output/{review_type.lower()}_review_{timestamp}.md"
    
    # Always write markdown file first
    with open(md_path, 'w', encoding='utf-8') as f:
        f.write(roo_output)
    
    if output_format.lower() == 'docx':
        # Convert to DOCX if requested
        docx_path = md_path.replace('.md', '.docx')
        markdown_to_docx(roo_output, docx_path)
        return docx_path
    
    return md_path

def main():
    """Command line interface for the report generator."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Generate final performance review report')
    parser.add_argument('--input', required=True, help='Path to Roo Code output file')
    parser.add_argument('--type', required=True, choices=['annual', 'competency'],
                      help='Type of review')
    parser.add_argument('--format', default='markdown', choices=['markdown', 'docx'],
                      help='Output format (default: markdown)')
    
    args = parser.parse_args()
    
    try:
        # Load Roo Code output
        roo_output = load_roo_code_output(args.input)
        
        # Generate report
        output_path = generate_final_report(roo_output, args.type, args.format)
        
        print(f"Report generated successfully at: {output_path}")
        
    except Exception as e:
        print(f"Error generating report: {str(e)}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())